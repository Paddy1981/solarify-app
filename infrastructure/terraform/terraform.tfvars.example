# Solarify Solar Marketplace - Terraform Variables Example
# Copy this file to terraform.tfvars and update with your actual values

# ==============================================
# PROJECT CONFIGURATION
# ==============================================
project_id               = "solarify-marketplace-prod"
project_name            = "solarify"
environment             = "production"
deployment_version      = "1.0.0"
cost_center            = "engineering"
team                   = "platform"

# ==============================================
# TERRAFORM STATE CONFIGURATION
# ==============================================
terraform_state_bucket = "solarify-terraform-state-prod"

# ==============================================
# REGIONAL CONFIGURATION
# ==============================================
primary_region    = "us-central1"
secondary_region  = "us-east1"
secondary_regions = ["us-east1", "us-west1"]
availability_zones = ["us-central1-a", "us-central1-b", "us-central1-c"]

# ==============================================
# NETWORK CONFIGURATION
# ==============================================
enable_private_google_access = true
firewall_source_ranges       = ["10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16"]

# ==============================================
# SECURITY CONFIGURATION
# ==============================================
kms_key_rotation_period = "7776000s" # 90 days

# Service accounts to create
service_accounts = {
  app = {
    account_id   = "solarify-app"
    display_name = "Solarify Application Service Account"
    roles = [
      "roles/firestore.user",
      "roles/storage.objectViewer",
      "roles/secretmanager.secretAccessor"
    ]
  }
  build = {
    account_id   = "solarify-build"
    display_name = "Solarify CI/CD Build Service Account"
    roles = [
      "roles/cloudbuild.builds.editor",
      "roles/run.developer",
      "roles/storage.admin"
    ]
  }
  monitoring = {
    account_id   = "solarify-monitoring"
    display_name = "Solarify Monitoring Service Account"
    roles = [
      "roles/monitoring.editor",
      "roles/logging.logWriter"
    ]
  }
}

# ==============================================
# DATABASE CONFIGURATION
# ==============================================
firestore_database_type = "(default)"
firestore_location_id   = "us-central"

# Redis configuration for caching
redis_config = {
  tier           = "STANDARD_HA"
  memory_size_gb = 4
  version        = "REDIS_6_X"
  auth_enabled   = true
  
  maintenance_window = {
    day          = "SUNDAY"
    start_time   = "03:00"
  }
}

# Storage buckets configuration
storage_buckets = {
  app_assets = {
    name          = "solarify-app-assets-prod"
    location      = "US"
    storage_class = "STANDARD"
    versioning    = true
    cors = [{
      origin          = ["https://solarify.com", "https://app.solarify.com"]
      method          = ["GET", "POST", "PUT", "DELETE"]
      response_header = ["*"]
      max_age_seconds = 3600
    }]
  }
  user_uploads = {
    name          = "solarify-user-uploads-prod"
    location      = "US"
    storage_class = "STANDARD"
    versioning    = true
    lifecycle_rules = [{
      condition = {
        age = 90
      }
      action = {
        type          = "SetStorageClass"
        storage_class = "NEARLINE"
      }
    }]
  }
}

# ==============================================
# APPLICATION CONFIGURATION
# ==============================================
application_image     = "gcr.io/solarify-marketplace-prod/solarify-app:latest"
application_port      = 3000
health_check_path     = "/api/health"

# Domain and SSL configuration
domain_name = "solarify.com"
enable_ssl  = true
ssl_certificate_map = {
  "solarify.com"     = "solarify-com-cert"
  "app.solarify.com" = "app-solarify-com-cert"
}

# ==============================================
# MONITORING CONFIGURATION
# ==============================================
monitoring_config = {
  enable_uptime_checks   = true
  enable_error_reporting = true
  enable_profiling      = true
  enable_tracing        = true
}

# Notification channels
notification_channels = {
  email = {
    type    = "email"
    labels  = {
      email_address = "alerts@solarify.com"
    }
    enabled = true
  }
  slack = {
    type    = "slack"
    labels  = {
      channel_name = "#alerts"
      url         = "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK"
    }
    enabled = true
  }
  pagerduty = {
    type    = "pagerduty"
    labels  = {
      service_key = "YOUR_PAGERDUTY_SERVICE_KEY"
    }
    enabled = true
  }
}

# Alert thresholds
alert_thresholds = {
  error_rate_threshold       = 0.05  # 5%
  latency_threshold_seconds  = 2.0
  cpu_utilization_threshold  = 0.8   # 80%
  memory_utilization_threshold = 0.8 # 80%
  storage_utilization_threshold = 0.8 # 80%
  
  # Business metrics
  rfq_creation_rate_min      = 10    # Minimum RFQs per hour
  quote_response_rate_max    = 3600  # Maximum seconds for quote response
  system_uptime_target       = 0.999 # 99.9% uptime
}

# Log retention
log_retention_days = 90

# ==============================================
# CI/CD CONFIGURATION
# ==============================================
source_repository_url = "https://github.com/solarify/solarify-marketplace"
branch_pattern       = "^(main|develop|release/.*)$"
artifact_registry_id = "solarify-registry"

build_config = {
  timeout_seconds = "1200s"
  machine_type   = "E2_STANDARD_4"
  
  substitutions = {
    _DEPLOY_REGION = "us-central1"
    _SERVICE_NAME  = "solarify-app"
  }
  
  steps = [
    {
      name = "gcr.io/cloud-builders/docker"
      args = ["build", "-t", "$PROJECT_ID/solarify-app:$COMMIT_SHA", "."]
    },
    {
      name = "gcr.io/cloud-builders/docker"
      args = ["push", "$PROJECT_ID/solarify-app:$COMMIT_SHA"]
    },
    {
      name = "gcr.io/google.com/cloudsdktool/cloud-sdk"
      args = [
        "gcloud", "run", "deploy", "solarify-app",
        "--image", "$PROJECT_ID/solarify-app:$COMMIT_SHA",
        "--region", "$_DEPLOY_REGION",
        "--platform", "managed"
      ]
    }
  ]
}

# ==============================================
# BACKUP AND DISASTER RECOVERY
# ==============================================
enable_backup               = true
backup_retention_days       = 90
enable_cross_region_backup  = true

backup_schedules = {
  firestore_full        = "0 2 * * 0"    # Sunday 2 AM
  firestore_incremental = "0 2 * * 1-6"  # Mon-Sat 2 AM
  auth_backup           = "0 3 * * *"     # Daily 3 AM
  storage_backup        = "0 4 * * *"     # Daily 4 AM
  solar_data_backup     = "0 */6 * * *"   # Every 6 hours
}

firestore_collections = {
  critical = [
    "users",
    "profiles",
    "rfqs",
    "quotes",
    "solar_systems",
    "energy_production",
    "projects"
  ]
  standard = [
    "products",
    "weather_data",
    "utility_rates",
    "reviews"
  ]
  optional = [
    "notifications",
    "analytics",
    "user_activity",
    "portfolios"
  ]
}

notification_emails = [
  "devops@solarify.com",
  "cto@solarify.com",
  "engineering-lead@solarify.com"
]

# ==============================================
# COST MANAGEMENT
# ==============================================
budget_config = {
  amount         = 5000.00  # Monthly budget in USD
  currency_code  = "USD"
  
  # Budget thresholds for alerts
  thresholds = [
    {
      threshold_percent = 0.5  # 50%
      spend_basis      = "CURRENT_SPEND"
    },
    {
      threshold_percent = 0.8  # 80%
      spend_basis      = "CURRENT_SPEND"
    },
    {
      threshold_percent = 1.0  # 100%
      spend_basis      = "FORECASTED_SPEND"
    }
  ]
}

cost_optimization = {
  enable_preemptible_instances  = false  # Not recommended for production
  enable_committed_use_discount = true
  enable_sustained_use_discount = true
  storage_cost_optimization     = true
  enable_cloud_run_min_instances = true
  
  # Auto-scaling policies
  auto_scaling = {
    target_cpu_utilization    = 70
    target_memory_utilization = 80
    scale_down_delay          = "300s"
    scale_up_delay           = "60s"
  }
}

# ==============================================
# ENVIRONMENT-SPECIFIC OVERRIDES
# ==============================================

# Development environment overrides (when environment = "development")
# These values will be used when deploying to development
dev_overrides = {
  instance_min_count = 0
  instance_max_count = 3
  redis_memory_gb    = 1
  budget_amount      = 500.00
  backup_retention_days = 7
  log_retention_days = 30
}

# Staging environment overrides (when environment = "staging")
staging_overrides = {
  instance_min_count = 1
  instance_max_count = 5
  redis_memory_gb    = 2
  budget_amount      = 1500.00
  backup_retention_days = 30
  log_retention_days = 60
}
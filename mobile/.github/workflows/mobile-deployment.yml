# =============================================================================
# Mobile App CI/CD Pipeline
# =============================================================================
# Automated testing, building, and deployment for iOS and Android apps
# =============================================================================

name: Mobile App Deployment

on:
  push:
    branches: [main, develop]
    paths:
      - 'mobile/**'
      - '.github/workflows/mobile-deployment.yml'
  pull_request:
    branches: [main]
    paths:
      - 'mobile/**'
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production
      platform:
        description: 'Platform to deploy'
        required: true
        default: 'both'
        type: choice
        options:
          - ios
          - android
          - both

env:
  NODE_VERSION: '18'
  JAVA_VERSION: '11'
  XCODE_VERSION: '14.3'
  RUBY_VERSION: '3.0'

jobs:
  # =============================================================================
  # Setup and Testing
  # =============================================================================
  setup:
    name: Setup and Test
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.deployment-check.outputs.should-deploy }}
      environment: ${{ steps.deployment-check.outputs.environment }}
      platform: ${{ steps.deployment-check.outputs.platform }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: mobile/package-lock.json
          
      - name: Install dependencies
        working-directory: mobile
        run: npm ci
        
      - name: Lint code
        working-directory: mobile
        run: npm run lint
        
      - name: Type check
        working-directory: mobile
        run: npm run typecheck
        
      - name: Run tests
        working-directory: mobile
        run: npm test -- --coverage --watchAll=false
        
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          directory: mobile/coverage
          flags: mobile
          
      - name: Determine deployment strategy
        id: deployment-check
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "platform=${{ github.event.inputs.platform }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "release" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "platform=both" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "platform=both" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "environment=development" >> $GITHUB_OUTPUT
            echo "platform=both" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

  # =============================================================================
  # Android Build and Deploy
  # =============================================================================
  android:
    name: Android Build & Deploy
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.should-deploy == 'true' && (needs.setup.outputs.platform == 'android' || needs.setup.outputs.platform == 'both')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: mobile/package-lock.json
          
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
          working-directory: mobile
          
      - name: Install dependencies
        working-directory: mobile
        run: npm ci
        
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('mobile/android/**/*.gradle*', 'mobile/android/**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
            
      - name: Setup Android keystore
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
        run: |
          echo "$ANDROID_KEYSTORE_BASE64" | base64 --decode > mobile/android/app/release-keystore.jks
          
      - name: Build Android APK/AAB
        working-directory: mobile
        env:
          ANDROID_KEYSTORE_FILE: './release-keystore.jks'
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
          ENVIRONMENT: ${{ needs.setup.outputs.environment }}
        run: |
          if [[ "${{ needs.setup.outputs.environment }}" == "production" ]]; then
            bundle exec fastlane android production
          elif [[ "${{ needs.setup.outputs.environment }}" == "staging" ]]; then
            bundle exec fastlane android staging
          else
            bundle exec fastlane android development
          fi
          
      - name: Upload Android artifacts
        uses: actions/upload-artifact@v3
        with:
          name: android-artifacts-${{ needs.setup.outputs.environment }}
          path: |
            mobile/build/*.apk
            mobile/build/*.aab
          retention-days: 30
          
      - name: Upload to Google Play (Production only)
        if: needs.setup.outputs.environment == 'production'
        working-directory: mobile
        env:
          GOOGLE_PLAY_JSON_KEY_FILE: ${{ secrets.GOOGLE_PLAY_JSON_KEY_FILE }}
        run: |
          echo '${{ secrets.GOOGLE_PLAY_JSON_KEY_FILE }}' > google-play-service-account.json
          bundle exec fastlane android production
          
  # =============================================================================
  # iOS Build and Deploy
  # =============================================================================
  ios:
    name: iOS Build & Deploy
    runs-on: macos-13
    needs: setup
    if: needs.setup.outputs.should-deploy == 'true' && (needs.setup.outputs.platform == 'ios' || needs.setup.outputs.platform == 'both')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: mobile/package-lock.json
          
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
          working-directory: mobile
          
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}
          
      - name: Install dependencies
        working-directory: mobile
        run: npm ci
        
      - name: Cache CocoaPods
        uses: actions/cache@v3
        with:
          path: mobile/ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('mobile/ios/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-
            
      - name: Install CocoaPods
        working-directory: mobile/ios
        run: pod install
        
      - name: Setup iOS certificates and provisioning profiles
        working-directory: mobile
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
          MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.MATCH_GIT_BASIC_AUTHORIZATION }}
          APPLE_ID_USERNAME: ${{ secrets.APPLE_ID_USERNAME }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          bundle exec fastlane setup_ios_certificates
          
      - name: Build iOS app
        working-directory: mobile
        env:
          APPLE_ID_USERNAME: ${{ secrets.APPLE_ID_USERNAME }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          ENVIRONMENT: ${{ needs.setup.outputs.environment }}
        run: |
          if [[ "${{ needs.setup.outputs.environment }}" == "production" ]]; then
            bundle exec fastlane ios production
          elif [[ "${{ needs.setup.outputs.environment }}" == "staging" ]]; then
            bundle exec fastlane ios staging
          else
            bundle exec fastlane ios development
          fi
          
      - name: Upload iOS artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ios-artifacts-${{ needs.setup.outputs.environment }}
          path: mobile/build/*.ipa
          retention-days: 30
          
  # =============================================================================
  # Post-deployment
  # =============================================================================
  post-deploy:
    name: Post-deployment tasks
    runs-on: ubuntu-latest
    needs: [setup, android, ios]
    if: always() && needs.setup.outputs.should-deploy == 'true'
    
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
          
      - name: Create deployment summary
        run: |
          echo "## 🚀 Mobile App Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ needs.setup.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Platform:** ${{ needs.setup.outputs.platform }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.android.result }}" == "success" ]]; then
            echo "✅ Android build successful" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.android.result }}" == "failure" ]]; then
            echo "❌ Android build failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.ios.result }}" == "success" ]]; then
            echo "✅ iOS build successful" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.ios.result }}" == "failure" ]]; then
            echo "❌ iOS build failed" >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # =============================================================================
  # Security and Quality Checks
  # =============================================================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install dependencies
        working-directory: mobile
        run: npm ci
        
      - name: Run security audit
        working-directory: mobile
        run: npm audit --audit-level=high
        
      - name: Run CodeQL analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript
          
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2
        
      - name: Perform CodeQL analysis
        uses: github/codeql-action/analyze@v2
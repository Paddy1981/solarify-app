# =============================================================================
# Single CI/CD Pipeline for Firebase and Google Cloud Platform
# Demonstrates unified deployment - no separate agents needed
# =============================================================================
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: 'Skip test execution'
        required: false
        default: false
        type: boolean
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean
env:
  NODE_VERSION: '18'
  TERRAFORM_VERSION: '1.5.0'
jobs:
  # =============================================================================
  # SETUP AND VALIDATION
  # =============================================================================
  setup:
    name: üîß Setup and Validate
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.determine-env.outputs.environment }}
      project-id: ${{ steps.determine-env.outputs.project-id }}
      should-deploy: ${{ steps.determine-env.outputs.should-deploy }}
      
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
              
      - name: üéØ Determine environment and configuration
        id: determine-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi
          
          ENV=$(cat $GITHUB_OUTPUT | grep environment | cut -d'=' -f2)
          echo "project-id=solarify-$ENV" >> $GITHUB_OUTPUT
          
          # Determine if we should deploy
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          fi
              
      - name: üìä Display configuration
        run: |
          echo "üéØ Environment: ${{ steps.determine-env.outputs.environment }}"
          echo "üèóÔ∏è Project ID: ${{ steps.determine-env.outputs.project-id }}"
          echo "üöÄ Should Deploy: ${{ steps.determine-env.outputs.should-deploy }}"
          
---

  # =============================================================================
  # QUALITY GATE
  # =============================================================================
  quality-gate:
    name: üîç Quality Gate
    runs-on: ubuntu-latest
    needs: setup
        
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
              
      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
                
      - name: üì¶ Install dependencies
        run: npm ci
              
      - name: üßπ Code formatting check
        run: npm run format:check
              
      - name: üîç Lint code
        run: npm run lint
              
      - name: üìù Type check
        run: npm run typecheck
              
      - name: üîí Security audit
        run: npm audit --audit-level high
        continue-on-error: true
        
---

  # =============================================================================
  # BUILD AND TEST
  # =============================================================================
  build-and-test:
    name: üèóÔ∏è Build and Test
    runs-on: ubuntu-latest
    needs: [setup, quality-gate]
    if: ${{ github.event.inputs.skip_tests != 'true' }}
        
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
              
      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
                
      - name: üì¶ Install dependencies
        run: npm ci
              
      - name: üèóÔ∏è Build application
        run: npm run build
        env:
          PROJECT_ID: ${{ needs.setup.outputs.project-id }}
          ENVIRONMENT: ${{ needs.setup.outputs.environment }}
                
      - name: üß™ Run unit tests
        run: npm run test:ci
              
      - name: üìä Upload test coverage
        uses: codecov/codecov-action@v3
        if: always()
        continue-on-error: true
              
      - name: üíæ Cache build artifacts
        uses: actions/cache@v3
        with:
          path: |
            .next/
            out/
            build/
          key: build-artifacts-${{ github.sha }}
          restore-keys: |
            build-artifacts-
            
---

  # =============================================================================
  # E2E TESTS (only for main deployments)
  # =============================================================================
  e2e-tests:
    name: üé≠ End-to-End Tests
    runs-on: ubuntu-latest
    needs: [setup, build-and-test]
    if: ${{ needs.setup.outputs.environment == 'production' && github.event.inputs.skip_tests != 'true' }}
        
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
              
      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
                
      - name: üì¶ Install dependencies
        run: npm ci
              
      - name: üé≠ Run Cypress E2E tests
        uses: cypress-io/github-action@v6
        with:
          build: npm run build
          start: npm start
          wait-on: 'http://localhost:3000'
          wait-on-timeout: 120
          browser: chrome
          headless: true
                
      - name: üìä Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: cypress-results
          path: |
            cypress/results/
            cypress/screenshots/
            cypress/videos/
            
---

  # =============================================================================
  # UNIFIED FIREBASE & GOOGLE CLOUD DEPLOYMENT
  # =============================================================================
  deploy-unified-platform:
    name: üöÄ Deploy to Firebase & Google Cloud
    runs-on: ubuntu-latest
    needs: [setup, build-and-test]
    if: ${{ needs.setup.outputs.should-deploy == 'true' && (success() || github.event.inputs.force_deploy == 'true') }}
        
    environment:
      name: ${{ needs.setup.outputs.environment }}
      url: https://${{ needs.setup.outputs.project-id }}.web.app
          
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
              
      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
                
      - name: üîß Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
                
      - name: üîê Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          project_id: ${{ needs.setup.outputs.project-id }}
                
      - name: üõ†Ô∏è Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ needs.setup.outputs.project-id }}
                
      - name: üî• Setup Firebase CLI
        run: |
          npm install -g firebase-tools
          echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" > /tmp/firebase-service-account.json
          export GOOGLE_APPLICATION_CREDENTIALS="/tmp/firebase-service-account.json"
          firebase use ${{ needs.setup.outputs.project-id }}
                
      - name: üì¶ Install dependencies and build
        run: |
          npm ci
          npm run build
        env:
          PROJECT_ID: ${{ needs.setup.outputs.project-id }}
          ENVIRONMENT: ${{ needs.setup.outputs.environment }}
                
      - name: ‚úÖ Pre-deployment validation
        run: |
          chmod +x ./deployment/pre-deployment-validation.sh
          ./deployment/pre-deployment-validation.sh
        env:
          PROJECT_ID: ${{ needs.setup.outputs.project-id }}
          ENVIRONMENT: ${{ needs.setup.outputs.environment }}
          REGION: us-central1
                
      # =============================================================================
      # INFRASTRUCTURE DEPLOYMENT (Google Cloud)
      # =============================================================================
      - name: üèóÔ∏è Deploy Infrastructure with Terraform
        run: |
          cd infrastructure/terraform
                    
          # Initialize Terraform with GCS backend
          terraform init \
            -backend-config="bucket=${{ needs.setup.outputs.project-id }}-terraform-state" \
            -backend-config="prefix=terraform/state"
                    
          # Select or create workspace
          terraform workspace select ${{ needs.setup.outputs.environment }} || \
          terraform workspace new ${{ needs.setup.outputs.environment }}
                    
          # Plan infrastructure changes
          terraform plan \
            -var="project_id=${{ needs.setup.outputs.project-id }}" \
            -var="environment=${{ needs.setup.outputs.environment }}" \
            -var="primary_region=us-central1" \
            -out=terraform.plan
                    
          # Apply infrastructure changes
          terraform apply -auto-approve terraform.plan
                
      # =============================================================================
      # FIREBASE SERVICES DEPLOYMENT
      # =============================================================================
      - name: üî• Deploy Firestore Rules and Indexes
        run: |
          firebase deploy --only firestore:rules,firestore:indexes \
            --project ${{ needs.setup.outputs.project-id }}
                  
      - name: üî• Deploy Firebase Functions (if any)
        run: |
          if [ -d "functions" ]; then
            firebase deploy --only functions \
              --project ${{ needs.setup.outputs.project-id }}
          else
            echo "No Firebase Functions to deploy"
          fi
                
      - name: üöÄ Deploy to Firebase App Hosting
        run: |
          # Deploy using Firebase App Hosting
          firebase apphosting:deploy \
            --project ${{ needs.setup.outputs.project-id }}
        env:
          GOOGLE_APPLICATION_CREDENTIALS: /tmp/firebase-service-account.json
                
      # =============================================================================
      # FALLBACK: Traditional Firebase Hosting
      # =============================================================================
      - name: üåê Deploy to Firebase Hosting (Fallback)
        if: failure()
        run: |
          # If App Hosting fails, use traditional hosting
          npm run build
          firebase deploy --only hosting \
            --project ${{ needs.setup.outputs.project-id }}
        env:
          GOOGLE_APPLICATION_CREDENTIALS: /tmp/firebase-service-account.json
                
      # =============================================================================
      # POST-DEPLOYMENT VERIFICATION
      # =============================================================================
      - name: ‚úÖ Post-deployment verification
        run: |
          chmod +x ./deployment/post-deployment-verification.sh
          ./deployment/post-deployment-verification.sh
        env:
          PROJECT_ID: ${{ needs.setup.outputs.project-id }}
          ENVIRONMENT: ${{ needs.setup.outputs.environment }}
          REGION: us-central1
                
      - name: üîç Health check
        run: |
          npm run health-check
                
      - name: ‚ö° Performance validation
        run: |
          npm run performance-check
                
      - name: üß™ Smoke tests
        run: |
          npm run test:smoke
                
      # =============================================================================
      # MONITORING SETUP
      # =============================================================================
      - name: üìä Setup monitoring and alerting
        run: |
          cd infrastructure/terraform
          terraform apply -target=module.monitoring -auto-approve \
            -var="project_id=${{ needs.setup.outputs.project-id }}" \
            -var="environment=${{ needs.setup.outputs.environment }}"
                  
      - name: üßπ Cleanup temporary files
        if: always()
        run: |
          rm -f /tmp/firebase-service-account.json
          
---

  # =============================================================================
  # NOTIFICATION AND REPORTING
  # =============================================================================
  notify-deployment:
    name: üì¢ Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [setup, deploy-unified-platform]
    if: always()
        
    steps:
      - name: üìä Determine deployment status
        id: status
        run: |
          if [[ "${{ needs.deploy-unified-platform.result }}" == "success" ]]; then
            echo "status=‚úÖ SUCCESS" >> $GITHUB_OUTPUT
            echo "color=good" >> $GITHUB_OUTPUT
          else
            echo "status=‚ùå FAILED" >> $GITHUB_OUTPUT
            echo "color=danger" >> $GITHUB_OUTPUT
          fi
                
      - name: üì± Send Slack notification
        if: github.event.inputs.environment != 'local' && github.event.inputs.environment != 'dev' && secrets.SLACK_WEBHOOK != '' # Corrected Line
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "üöÄ Solarify Unified Deployment",
              "attachments": [
                {
                  "color": "${{ steps.status.outputs.color }}",
                  "fields": [
                    {
                      "title": "Status",
                      "value": "${{ steps.status.outputs.status }}",
                      "short": true
                    },
                    {
                      "title": "Environment", 
                      "value": "${{ needs.setup.outputs.environment }}",
                      "short": true
                    },
                    {
                      "title": "Project",
                      "value": "${{ needs.setup.outputs.project-id }}",
                      "short": true
                    },
                    {
                      "title": "URL",
                      "value": "https://${{ needs.setup.outputs.project-id }}.web.app",
                      "short": true
                    },
                    {
                      "title": "Commit",
                      "value": "<https://github.com/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>",
                      "short": true
                    },
                    {
                      "title": "Actor",
                      "value": "${{ github.actor }}",
                      "short": true
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          
---

  # =============================================================================
  # ROLLBACK (Manual Trigger Only)
  # =============================================================================
  rollback:
    name: üîÑ Rollback Deployment
    runs-on: ubuntu-latest
    if: ${{ failure() && github.event_name == 'workflow_dispatch' }}
    needs: [setup, deploy-unified-platform]
        
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
              
      - name: üîê Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          project_id: ${{ needs.setup.outputs.project-id }}
                
      - name: üî• Setup Firebase CLI
        run: |
          npm install -g firebase-tools
          echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" > /tmp/firebase-service-account.json
                
      - name: üîÑ Execute rollback
        run: |
          chmod +x ./deployment/unified-deploy.sh
          ./deployment/unified-deploy.sh --rollback
        env:
          PROJECT_ID: ${{ needs.setup.outputs.project-id }}
          ENVIRONMENT: ${{ needs.setup.outputs.environment }}
          GOOGLE_APPLICATION_CREDENTIALS: /tmp/firebase-service-account.json
